#!/bin/bash

# Test script for argo-proxy performance optimizations

echo "üöÄ Testing Argo Proxy Performance Optimizations"
echo "================================================"

# Check if the server is running
if ! curl -s http://localhost:44500/health > /dev/null; then
    echo "‚ùå Argo proxy server is not running on localhost:44500"
    echo "Please start the server first with: python -m argoproxy"
    exit 1
fi

echo "‚úÖ Server is running"

# Set performance environment variables for testing
export ARGO_PROXY_MAX_CONNECTIONS=150
export ARGO_PROXY_MAX_CONNECTIONS_PER_HOST=50
export ARGO_PROXY_KEEPALIVE_TIMEOUT=30
export ARGO_PROXY_CONNECT_TIMEOUT=10
export ARGO_PROXY_READ_TIMEOUT=30
export ARGO_PROXY_TOTAL_TIMEOUT=60

echo "üîß Performance environment variables set:"
echo "  MAX_CONNECTIONS: $ARGO_PROXY_MAX_CONNECTIONS"
echo "  MAX_CONNECTIONS_PER_HOST: $ARGO_PROXY_MAX_CONNECTIONS_PER_HOST"
echo ""

# Run the original test for comparison
echo "üìä Running original parallel test (10 requests)..."
python dev_scripts/chat_completions_parallel_test.py -m async -n 10

echo ""
echo "üöÑ Running optimized performance test (20 requests)..."
python dev_scripts/performance_test.py -n 20

echo ""
echo "üèÅ Running high concurrency test (30 requests)..."
python dev_scripts/performance_test.py -n 30

echo ""
echo "‚ú® Performance testing completed!"
echo ""
echo "Key improvements to look for:"
echo "‚úÖ Lower response time variance"
echo "‚úÖ More consistent first chunk times"
echo "‚úÖ Higher connection reuse rate"
echo "‚úÖ Better overall throughput"